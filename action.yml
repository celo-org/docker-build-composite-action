name: Trivy
description: "Run a Trivy Scan and upload the results"

inputs:
  scan-type:
    description: "type of scan: image or fs"
    required: true
    type: string
  image-ref:
    description: "image to scan (required if scan-type is image)"
    type: string
  scan-ref:
    description: "path to scan (required if scan-type is fs)"
    type: string
  timeout:
    default: 15m
    type: string
  vuln-type:
    default: "os,library"
    type: string
  severity:
    default: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
    type: string
  output-file:
    default: "trivy"
  summary:
    default: true
    type: boolean
  pr-comment:
    default: true
    type: boolean
  skip-dirs:
    type: string
  skip-setup:
    default: false
    type: boolean

runs:
  using: "composite"
  steps:
    - name: Validate Required Inputs
      shell: bash
      run: |
        if [[ "${{ inputs.scan-type }}" == "image" && -z "${{ inputs.image-ref }}" ]]; then
          echo "::error::scan-type=image requires image-ref"
          exit 1
        elif [[ "${{ inputs.scan-type }}" == "fs" && -z "${{ inputs.scan-ref }}" ]]; then
          echo "::error::scan-type=fs requires scan-ref"
          exit 1
        elif [[ "${{ inputs.scan-type }}" != "image" && "${{ inputs.scan-type }}" != "fs" ]]; then
          echo "::error::scan-type must be either 'image' or 'fs'"
          exit 1
        fi

    - name: Run Trivy Scan
      id: trivy
      uses: aquasecurity/trivy-action@v0.11.1
      with:
        scan-type: ${{ inputs.scan-type }}
        image-ref: ${{ inputs.image-ref }}
        scan-ref: ${{ inputs.scan-ref }}
        timeout: ${{ inputs.timeout }}
        vuln-type: ${{ inputs.vuln-type }}
        severity: ${{ inputs.severity }}
        format: json
        output: ${{ inputs.output-file }}.json
        skip-dirs: ${{ inputs.skip-dirs }}
        skip-setup-trivy: ${{ inputs.skip-setup }}

    - name: Derive Report Name
      id: report-name
      env:
        IMAGE: ${{ inputs.image-ref }}
        SCAN_REF: ${{ inputs.scan-ref }}
      shell: bash
      run: |
        if [ -n "$IMAGE" ]; then
          basename="$(basename $IMAGE)"
          stripped_name="${basename%:*}-${basename##*:}"
        else 
          if [ "$SCAN_REF" == "." ]; then
            SCAN_REF=$(pwd)
          fi
          basename="$(basename $SCAN_REF)"
          random_id=$(openssl rand -hex 6)
          stripped_name="${basename}-${random_id}"
        fi
        echo "name=$stripped_name" >> $GITHUB_OUTPUT

    - name: Upload JSON Report
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.report-name.outputs.name }}-${{ inputs.scan-type }}-trivy
        path: ${{ inputs.output-file }}.json

    - name: Check if GHAS is Enabled
      uses: actions/github-script@v7
      id: ghas-check
      with:
        script: |
          const [owner, repo] = '${{ github.repository }}'.split("/");
          const res = await github.rest.repos.get({ owner, repo });
          const isPrivate = res.data.private;
          const hasGhas = res.data.security_and_analysis?.advanced_security?.status === 'enabled';
          if (isPrivate && !hasGhas) {
            core.warning('GHAS is NOT enabled and repo is private. Cannot upload SARIF.');
            return false;
          }
          return true;

    - name: Convert to SARIF
      if: fromJSON(steps.ghas-check.outputs.result)
      id: convert-sarif
      shell: bash
      run: |
        trivy convert --format sarif --output ${{ inputs.output-file }}.sarif ${{ inputs.output-file }}.json
        echo "sarif=${{ inputs.output-file }}.sarif" >> $GITHUB_OUTPUT

    - name: Upload SARIF to Security Tab
      if: fromJSON(steps.ghas-check.outputs.result)
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: ${{ steps.convert-sarif.outputs.sarif }}
        category: ${{ inputs.scan-type }}-${{ inputs.scan-ref != '' && inputs.scan-ref || inputs.image-ref }}
