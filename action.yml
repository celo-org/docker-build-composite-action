name: "Build docker image"
description: "Build a docker image"
inputs:
  runner_platorm:
    type: string
    description: "Platform of the github runner for build testing"
    required: false
    default: linux/amd64
  platforms:
    type: string
    description: "Image platform(s)"
    required: true
    default: linux/amd64
  context:
    type: string
    description: "Dockerfile Build context path"
    required: true
  dockerfile:
    type: string
    description: "Dockerfile path"
    required: true
  push:
    type: string
    description: "Push the image to the remote repository. Requires to be pre-authenticated to the registry. Either push or load must be true"
    required: true
    default: 'true'
  build-args:
    type: string
    description: "List of build-time variables"
    required: false
  registry:
    type: string
    description: "Registry to push the image to"
    required: true
  tags:
    type: string
    description: "CSV list of tags to apply to the image"
    required: true
    default: latest
  summary:
    type: boolean
    description: "enable github summary"
    default: true
  pr-comment:
    type: boolean
    description: "enable pr-comment"
    default: true
  trivy-enabled:
    type: boolean
    default: true
  trivy-skip-dirs:
    descriptipn: "skip directories to scan with trivy"
    type: string
  skip-setup-trivy:
    type: boolean
    descriptipn: "skip trivy setup"
    default: false

runs:
  using: "composite"
  steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Conditionally format tags with full image + repo definition
      id: process_tags
      env:
        REGISTRY: ${{ inputs.registry }}
        TAGS: ${{ inputs.tags }}
      shell: bash
      run: |
        function process_tags() {
            local processed_tags=()

            # split tag field on comma character and add project + ${{ env.REGISTRY }} + image_name 
            IFS=',' read -ra tags <<< "${{ env.TAGS }}"
            for tag in "${tags[@]}"; do
                case "$tag" in 
                *:*)
                    # tag includes ':' - assume preprocessed and just pass to output
                    processed_tags+=("$tag")
                    ;;
                *)
                    # tag needs to include full host + repo definition
                    processed_tags+=("${{env.REGISTRY }}:$tag")
                    ;;
                esac
            done

            # format full tags into csv for docker/build-push-action
            output_str=$(printf "%s," "${processed_tags[@]}")


            # export first processed tag in list for trivy scan
            echo "base_image_name=$(basename ${{env.REGISTRY}})" >> $GITHUB_OUTPUT
            echo "first_tag=${processed_tags[0]}" >> $GITHUB_OUTPUT
            echo "processed=$output_str" >> $GITHUB_OUTPUT

            echo "::debug::processed_tags=${processed_tags[@]}"
            echo "::debug::output_str=$output_str"
            echo "::debug::first_tag=${processed_tags[0]}"
        }
        process_tags

    - name: Build container image
      uses: docker/build-push-action@v6
      env:
        DOCKER_BUILD_SUMMARY: false 
      id: docker-build
      with:
        platforms: ${{ inputs.runner_platform }}
        file: ${{ inputs.dockerfile }}
        context: ${{ inputs.context }}
        cache-from: type=registry,ref=${{ inputs.registry }}:buildcache
        cache-to: type=local,dest=cache
        tags: ${{ steps.process_tags.outputs.processed }}
        load: true
        build-args: ${{ inputs.build-args }}
         
    - name: Scan for OIDC credentials
      shell: bash
      run: |
        echo "Scanning for oidc credentials"
        set +e
        docker create --name="tmp_container" ${{ steps.docker-build.outputs.imageid }}
        found=$(docker export tmp_container | tar tf - | grep -e "gha-creds-.*.json" | wc -l)
        if [ $found -ge 1 ]; then
            echo -e "::error::Found oidc credentials\nAdd the following line to your .dockerignore file\ngha-creds-*.json"
        fi
        exit "$found"

    - name: Build and push
      env:
        DOCKER_BUILD_SUMMARY: ${{ inputs.summary }}
      if: ${{ inputs.push }} == true
      uses: docker/build-push-action@v6
      id: docker-build-push
      with:
        platforms: ${{ inputs.platforms }}
        file: ${{ inputs.dockerfile }}
        context: ${{ inputs.context }}
        push: ${{ fromJSON(inputs.push) }}
        tags: ${{ steps.process_tags.outputs.processed }}
        build-args: ${{ inputs.build-args }}
        cache-from: type=local,src=cache
        cache-to: type=registry,ref=${{ inputs.registry }}:buildcache,mode=max
        provenance: ${{ fromJSON(false) }}

    - name: Generate artifact attestation
      uses: actions/attest-build-provenance@v2
      with:
        subject-name: ${{ inputs.registry }}
        subject-digest: ${{ steps.docker-build-push.outputs.digest }}
        push-to-registry: true

    - name: Extract image name from registry for SBOM artifact name
      id: sbom-artifact-name
      env:
        IMAGE: ${{ steps.process_tags.outputs.first_tag }}
      shell: bash
      run: |
        basename="${IMAGE##*/}"
        stripped_name="${basename%:*}-${basename##*:}"
        echo "name=$stripped_name" >> $GITHUB_OUTPUT

    - uses: anchore/sbom-action@v0
      id: build-sbom
      with:
        image: ${{ inputs.registry }}@${{ steps.docker-build-push.outputs.digest }}
        output-file: ./sbom.spdx.json
        artifact-name: sbom-${{ steps.sbom-artifact-name.outputs.name }}.spdx.json
        dependency-snapshot: true
     
    - name: Generate SBOM attestation
      uses: actions/attest-sbom@v1
      with:
        subject-name: ${{ inputs.registry }}
        subject-digest: ${{ steps.docker-build-push.outputs.digest }}
        sbom-path: sbom.spdx.json
        push-to-registry: true 
    
    - name: Run Trivy Scan
      id: trivy
      uses: aquasecurity/trivy-action@master
      env:
        FULL_IMAGE_NAME: ${{ steps.process_tags.outputs.first_tag }}
        BASE_IMAGE_NAME: ${{ steps.process_tags.outputs.base_image_name }}
      with:
        scan-type: image
        image-ref: ${{ env.FULL_IMAGE_NAME }}
        skip-dirs: ${{ inputs.trivy-skip-dirs }}
        timeout: ${{ inputs.timeout }}
        vuln-type: "os,library"
        severity: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
        format: json
        skip-setup-trivy: ${{ inputs.skip-setup-trivy }}
        output: trivy-${{ env.BASE_IMAGE_NAME }}-${{ github.run_id }}-image.json

    - name: Upload JSON Report
      uses: actions/upload-artifact@v4
      env:
          TRIVY_FILE: trivy-${{ steps.process_tags.outputs.base_image_name }}-${{ github.run_id }}-image.json
      with:
        name: ${{ env.TRIVY_FILE }}
        path: ${{ env.TRIVY_FILE }}

    - name: Convert Report to Text
      if: ${{ inputs.summary || inputs.pr-comment }}
      id: convert-text
      env:
        text-file: trivy-${{ steps.process_tags.outputs.base_image_name }}-image.txt
        json-file: trivy-${{ steps.process_tags.outputs.base_image_name }}-image.json
      shell: bash
      run: |
        trivy convert --format table --output ${{ env.text-file }} ${{ env.json-file }}
        if [ "$(stat -c%s ${{ env.text-file }})" -gt 0 ]; then
          echo "text=${{ env.text-file }}" >> $GITHUB_OUTPUT
        else
          echo "text=" >> $GITHUB_OUTPUT  # Explicitly unset the output
        fi


